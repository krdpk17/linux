" ---------------------------------------------------------------------------- "
" $Id: vimrc,v 1.2 2000/02/29 09:36:23 ron Exp witch $
" ---------------------------------------------------------------------------- "
syntax on				" syntax highlighting
set tabstop=2
set shiftwidth=2
set hidden
set expandtab
"set dir=>/var/tmp/vi.recover		" dir for swapfilesa
"set dir=>~/vi.recover
set nowrap
set ruler				" see statusline
set showmode
set showcmd
set splitbelow				" new window at bottom
set noerrorbells
set laststatus=2
set noignorecase
set shortmess=atI
set showmatch				" No thanks!
set backspace=2
set comments=b:#,:%,fb:-,n:>,n:)
set shell=/bin/bash
"set number				" numbering lines
"set showbreak=\ \ \ \ \ \ \ \
set autoindent
set smartindent
set cindent
set cinoptions=>s,e0,n0,f0,{0,}0,^0,:0,=s,ps,ts,c1,+s,(2s,us,)20,*30,gs,hs
set smarttab
set autowrite
set makeef=/tmp/vim.err
set history=500
set helpheight=16
set nobackup				" no backup files
"set writebackup
set backupdir=.,/var/tmp/vi.backup,~/,/tmp
"set patchmode=.orig
"set wildmenu
set ttyfast
set swapsync=fsync
set suffixes=.o,.bak,.BAK,.orig
set verbose=0
set undolevels=8192
"set filetype=on
set incsearch
set hlsearch
set path=$PWD/**
"set mouse=a
set bg=dark

"colorscheme Light

"CSCOPE maps


" Copy and paste the word under cursor
"map <silent> <C-Space> :<C-R><C-W>

 " Use the C-Space word as the search criterion
" map <silent> <F9>   :cs add /localdisk/spkannan/cscope/cscope.out<CR><CR>
" map <C-\>s :cs find s <C-R><C-W><CR>
" map <C-\>c :cs find c <C-R><C-W><CR>
" map <C-\>g :cs find g <C-R><C-W><CR>
" map <C-\>d :cs find d <C-R><C-W><CR>
" map <C-\>e :cs find e <C-R><C-W><CR>
" map <C-\>f :cs find f <C-R><C-W><CR>
" map <C-\>i :cs find i <C-R><C-W><CR>
" map <C-\>t :cs find t <C-R><C-W><CR>

map c <Esc>/sfdsf@fd<CR>

if has("autocmd")
  autocmd FileType python set complete+=kC:/path/to/pydiction iskeyword+=.,(
endif " has("autocmd")

"autocmd BufNewFile,BufRead *.c,*.h	call FT_c()

" Filename
hi User1 ctermfg=black       ctermbg=gray
" Modified Flag
hi User2 ctermfg=darkred     ctermbg=gray
" ReadOnly Flag
hi User3 ctermfg=darkred     ctermbg=gray
" MODE
hi User4 ctermfg=black       ctermbg=gray
" Lineno
hi User5 ctermfg=black       ctermbg=gray
" Percent
hi User6 ctermfg=black       ctermbg=gray
" UNUSED
hi User7 ctermfg=darkgreen   ctermbg=gray
" Character
hi User8 ctermfg=black       ctermbg=gray
" Background
hi User9 ctermfg=black       ctermbg=gray

set statusline=%<%1*%-16.20f%2*%m%3*%r%9*%=%-3(%8*%.3b%)\ 0x%-3.3B%5*%6.6l,%-4.4c%-6.12o%06(%6*%-p%%%)
""""""""""""""""""""
" Using vim within pine
au BufNewFile,BufRead	/var/tmp/pico.*	set textwidth=72 nowritebackup nobackup formatoptions+=tcq
"au BufNewFile,BufRead * WMToggle


"""""""""""""""""
" Colors
"
" red=1, green=2, yellow=3, blue=4, magenta=5, cyan=6, white=7

"highlight Comment term=bold ctermfg=3 ctermbg=0
"highlight cComment term=bold ctermfg=6 ctermbg=0

function Phantom ()
  %s/\,\([a-zA-Z0-9*&-("]\)/\,\ \1/g " commas should be space separated
  %s/\,\s\+/\,\ /g " replace multiple spaces after commas with just one
  %s/\s\+\,/\,/g " delete leading spaces for commas
  %s/){/) {/g " put space before {
  %s/(\ /(/g " delete space after (
  %s/\ )/)/g " delete space before )
  %s/if(/if\ (/g " put space if (
  %s/for(/for\ (/g " put space for (
  %s/while(/while\ (/g "put space while (
  %s/catch(/catch\ (/g "put space while (
  %s/\([{}]\)\([a-zA-Z0-9*&-("]\)/\1\ \2/g "put space between }else }while
  %s/\([a-zA-Z0-9*&-("]\)\([{}]\)/\1\ \2/g "put space between else{
endfunction

function Mandrake ()
  %s/\,\([a-zA-Z0-9*&-("]\)/\,\ \1/g " commas should be space separated
  %s/\,\s\+/\,\ /g " replace multiple spaces after commas with just one
  %s/\s\+\,/\,/g " delete leading spaces for commas
  %s/){/) {/g " put space before {
  %s/(\ /(/g " delete space after (
  %s/if(/if\ (/g " put space if (
  %s/for(/for\ (/g " put space for (
  %s/while(/while\ (/g "put space while (
  %s/catch(/catch\ (/g "put space while (
  %s/\([{}]\)\([a-zA-Z0-9*&-("]\)/\1\ \2/g "put space between }else }while
  %s/\([a-zA-Z0-9*&-("]\)\([{}]\)/\1\ \2/g "put space between else{
endfunction

" Function Key Mappings
"unmap <F1>
"map <F1>	:<C-M>
map <F2>	:cs kill 0<CR>
map <F3>	:cs add cscope.out<CR>
map <F4> :set paste<CR>
map <F5> :set nopaste<CR>
map <F6> :/\s\+$<CR>
map <F7> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>
map <F8> :call Phantom()<cr>
map <F9> :call Mandrake()<cr>
highlight ExtraWhiteSpace ctermbg=red guibg=red
:match ExtraWhitespace /\s\+\%#\@<!$/
"map <F4>	:redo<C-M>
"map <F5>	:set nowrap<C-M>
"map <F6>	:set wrap<C-M>
"map <F7>	:cq<C-M>
"map <F8>	:w!<C-M>
"map <F9>	:q<C-M>
"map <F10>	:q!<C-M>
"map <F11>	:wq<C-M>
"map <F12>	:wq!<C-M>

"map @r 0O....+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....ll Spaces
map DS	:%s/[ <Tab>]//g<C-M>
" Delete Empty Lines
map DR	:g/^$/d<C-M>
" Delete Empty Lines + Lines w/whitespace only
map DE	:g/^[<C-I> ]*$/d<C-M>
" Change Lines w/WhiteSpace only to \n
map DW	:%s/^[<C-I> ]*$//g<C-M>
" Insert current time
map DT	o<C-R>=strftime("%a %b %d %T %Z %Y")<C-M><C-M>

map <C-J> <C-W>j<C-W>_
map <C-K> <C-W>k<C-W>_





"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""" C Programming - FileType *.c/*.h
"
function InsertTabWrapper()
      let col = col('.') - 1
      if !col || getline('.')[col - 1] !~ '\k'
           return "\<tab>"
      else
           return "\<c-p>"
      endif
endfunction

inoremap <tab> <c-r>=InsertTabWrapper()<cr>
set secure
set bg=dark
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CSCOPE settings for vim           
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" This file contains some boilerplate settings for vim's cscope interface,
" plus some keyboard mappings that I've found useful.
"
" USAGE: 
" -- vim 6:     Stick this file in your ~/.vim/plugin directory (or in a
"               'plugin' directory in some other directory that is in your
"               'runtimepath'.
"
" -- vim 5:     Stick this file somewhere and 'source cscope.vim' it from
"               your ~/.vimrc file (or cut and paste it into your .vimrc).
"
" NOTE: 
" These key maps use multiple keystrokes (2 or 3 keys).  If you find that vim
" keeps timing you out before you can complete them, try changing your timeout
" settings, as explained below.
"
" Happy cscoping,
"
" Jason Duell       jduell@alumni.princeton.edu     2002/3/7
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


" This tests to see if vim was configured with the '--enable-cscope' option
" when it was compiled.  If it wasn't, time to recompile vim... 
if has("cscope")

    """"""""""""" Standard cscope/vim boilerplate

    " use both cscope and ctag for 'ctrl-]', ':ta', and 'vim -t'
    set cscopetag

    " check cscope for definition of a symbol before checking ctags: set to 1
    " if you want the reverse search order.
    set csto=0

    " add any cscope database in current directory
    if filereadable("cscope.out")
        cs add cscope.out  
    " else add the database pointed to by environment variable 
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif

    " show msg when any other cscope db added
    set cscopeverbose  


    """"""""""""" My cscope/vim key mappings
    "
    " The following maps all invoke one of the following cscope search types:
    "
    "   's'   symbol: find all references to the token under cursor
    "   'g'   global: find global definition(s) of the token under cursor
    "   'c'   calls:  find all calls to the function name under cursor
    "   't'   text:   find all instances of the text under cursor
    "   'e'   egrep:  egrep search for the word under cursor
    "   'f'   file:   open the filename under cursor
    "   'i'   includes: find files that include the filename under cursor
    "   'd'   called: find functions that function under cursor calls
    "
    " Below are three sets of the maps: one set that just jumps to your
    " search result, one that splits the existing vim window horizontally and
    " diplays your search result in the new window, and one that does the same
    " thing, but does a vertical split instead (vim 6 only).
    "
    " I've used CTRL-\ and CTRL-@ as the starting keys for these maps, as it's
    " unlikely that you need their default mappings (CTRL-\'s default use is
    " as part of CTRL-\ CTRL-N typemap, which basically just does the same
    " thing as hitting 'escape': CTRL-@ doesn't seem to have any default use).
    " If you don't like using 'CTRL-@' or CTRL-\, , you can change some or all
    " of these maps to use other keys.  One likely candidate is 'CTRL-_'
    " (which also maps to CTRL-/, which is easier to type).  By default it is
    " used to switch between Hebrew and English keyboard mode.
    "
    " All of the maps involving the <cfile> macro use '^<cfile>$': this is so
    " that searches over '#include <time.h>" return only references to
    " 'time.h', and not 'sys/time.h', etc. (by default cscope will return all
    " files that contain 'time.h' as part of their name).


    " To do the first type of search, hit 'CTRL-\', followed by one of the
    " cscope search types above (s,g,c,t,e,f,i,d).  The result of your cscope
    " search will be displayed in the current window.  You can use CTRL-T to
    " go back to where you were before the search.  
    "

    nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>	
    nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>	
    nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>	
    nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>	
    nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>	
    nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>	
    nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>	


    " Using 'CTRL-spacebar' (intepreted as CTRL-@ by vim) then a search type
    " makes the vim window split horizontally, with search result displayed in
    " the new window.
    "
    " (Note: earlier versions of vim may not have the :scs command, but it
    " can be simulated roughly via:
    "    nmap <C-@>s <C-W><C-S> :cs find s <C-R>=expand("<cword>")<CR><CR>	

    nmap <C-@>s :scs find s <C-R>=expand("<cword>")<CR><CR>	
    nmap <C-@>g :scs find g <C-R>=expand("<cword>")<CR><CR>	
    nmap <C-@>c :scs find c <C-R>=expand("<cword>")<CR><CR>	
    nmap <C-@>t :scs find t <C-R>=expand("<cword>")<CR><CR>	
    nmap <C-@>e :scs find e <C-R>=expand("<cword>")<CR><CR>	
    nmap <C-@>f :scs find f <C-R>=expand("<cfile>")<CR><CR>	
    nmap <C-@>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>	
    nmap <C-@>d :scs find d <C-R>=expand("<cword>")<CR><CR>	


    " Hitting CTRL-space *twice* before the search type does a vertical 
    " split instead of a horizontal one (vim 6 and up only)
    "
    " (Note: you may wish to put a 'set splitright' in your .vimrc
    " if you prefer the new window on the right instead of the left

    nmap <C-@><C-@>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>f :vert scs find f <C-R>=expand("<cfile>")<CR><CR>	
    nmap <C-@><C-@>i :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>	
    nmap <C-@><C-@>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>


    """"""""""""" key map timeouts
    "
    " By default Vim will only wait 1 second for each keystroke in a mapping.
    " You may find that too short with the above typemaps.  If so, you should
    " either turn off mapping timeouts via 'notimeout'.
    "
    "set notimeout 
    "
    " Or, you can keep timeouts, by uncommenting the timeoutlen line below,
    " with your own personal favorite value (in milliseconds):
    "
    "set timeoutlen=4000
    "
    " Either way, since mapping timeout settings by default also set the
    " timeouts for multicharacter 'keys codes' (like <F1>), you should also
    " set ttimeout and ttimeoutlen: otherwise, you will experience strange
    " delays as vim waits for a keystroke after you hit ESC (it will be
    " waiting to see if the ESC is actually part of a key code like <F1>).
    "
    "set ttimeout 
    "
    " personally, I find a tenth of a second to work well for key code
    " timeouts. If you experience problems and have a slow terminal or network
    " connection, set it higher.  If you don't set ttimeoutlen, the value for
    " timeoutlent (default: 1000 = 1 second, which is sluggish) is used.
    "
    "set ttimeoutlen=100
endif

fun! ShowFuncName()
  let lnum = line(".")
  let col = col(".")
  echohl ModeMsg
  echo getline(search("^[^ \t#/]\\{2}.*[^:]\s*$", 'bW'))
  echohl None
  call search("\\%" . lnum . "l" . "\\%" . col . "c")
endfun
map f :call ShowFuncName() <CR>

let _curfile = expand("%:t")
if _curfile =~ "Makefile" || _curfile =~ "makefile" || _curfile =~ ".*\.mk"
  set noexpandtab
else
  set expandtab
  set tabstop=2
  set shiftwidth=2
endif
